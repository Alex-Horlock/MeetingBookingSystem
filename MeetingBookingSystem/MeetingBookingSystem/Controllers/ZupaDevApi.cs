/*
 * Seat Booking API
 *
 * zupaTech Seat Booking System
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alexhorlock93@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ZupaDevApiController : Controller
    { 
        /// <summary>
        /// seat booking request
        /// </summary>
        /// <remarks>Requests a seat or seats to book (max 4)</remarks>
        /// <param name="seatItem">Seat item to request</param>
        /// <response code="201">seat booked</response>
        /// <response code="400">invalid input, request invalid</response>
        /// <response code="409">the seat is already booked</response>
        [HttpPost]
        [Route("/Alex-Horlock/SeatBooking/1.0.0/seats")]
        [ValidateModelState]
        [SwaggerOperation("BookSeatRequest")]
        public virtual IActionResult BookSeatRequest([FromBody]List<Seat> seatItem)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);


            throw new NotImplementedException();
        }

        /// <summary>
        /// gets available meetings
        /// </summary>
        /// <remarks>returns all available meetings in system </remarks>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/Alex-Horlock/SeatBooking/1.0.0/meetings")]
        [ValidateModelState]
        [SwaggerOperation("GetMeetings")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Meeting>), description: "search results matching criteria")]
        public virtual IActionResult GetMeetings()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Meeting>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "[ {\n  \"date\" : \"2016-08-29T09:12:33.001Z\",\n  \"organiser\" : \"Alex Horlock\",\n  \"location\" : \"The Ritz, London\",\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"seats\" : [ {\n    \"name\" : \"Alex Horlock\",\n    \"column\" : 1,\n    \"meetingId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"isBooked\" : true,\n    \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"row\" : \"a\",\n    \"email\" : \"yourName@example.com\"\n  }, {\n    \"name\" : \"Alex Horlock\",\n    \"column\" : 1,\n    \"meetingId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"isBooked\" : true,\n    \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"row\" : \"a\",\n    \"email\" : \"yourName@example.com\"\n  } ]\n}, {\n  \"date\" : \"2016-08-29T09:12:33.001Z\",\n  \"organiser\" : \"Alex Horlock\",\n  \"location\" : \"The Ritz, London\",\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"seats\" : [ {\n    \"name\" : \"Alex Horlock\",\n    \"column\" : 1,\n    \"meetingId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"isBooked\" : true,\n    \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"row\" : \"a\",\n    \"email\" : \"yourName@example.com\"\n  }, {\n    \"name\" : \"Alex Horlock\",\n    \"column\" : 1,\n    \"meetingId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"isBooked\" : true,\n    \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"row\" : \"a\",\n    \"email\" : \"yourName@example.com\"\n  } ]\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Meeting>>(exampleJson)
            : default(List<Meeting>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// gets seats and their booking status
        /// </summary>
        /// <remarks>By passing in the row and column, you can search for all available seats in the system </remarks>
        /// <param name="row">the row of the seat</param>
        /// <param name="column">the column of the seat</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/Alex-Horlock/SeatBooking/1.0.0/seats")]
        [ValidateModelState]
        [SwaggerOperation("GetSeats")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Seat>), description: "search results matching criteria")]
        public virtual IActionResult GetSeats([FromQuery][StringLength(1, MinimumLength=1)]string row, [FromQuery][Range(1, 10)]int? column)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Seat>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"Alex Horlock\",\n  \"column\" : 1,\n  \"meetingId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"isBooked\" : true,\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"row\" : \"a\",\n  \"email\" : \"yourName@example.com\"\n}, {\n  \"name\" : \"Alex Horlock\",\n  \"column\" : 1,\n  \"meetingId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"isBooked\" : true,\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"row\" : \"a\",\n  \"email\" : \"yourName@example.com\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Seat>>(exampleJson)
            : default(List<Seat>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
