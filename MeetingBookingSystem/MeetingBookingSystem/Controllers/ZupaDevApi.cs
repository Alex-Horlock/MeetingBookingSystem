/*
 * Seat Booking API
 *
 * zupaTech Seat Booking System
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alexhorlock93@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using AlexHorlock.BookingSystem.Attributes;
using AlexHorlock.BookingSystem.Models;
using AlexHorlock.BookingSystem.Data;
using AlexHorlock.BookingSystem.Repositories;

namespace AlexHorlock.BookingSystem.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ZupaDevApiController : Controller
    { 
        private readonly IBookingSystemService _bookingSystem;
        public ZupaDevApiController(IBookingSystemService bookingSystem)
        {
            _bookingSystem = bookingSystem;
        }

        /// <summary>
        /// seat booking request
        /// </summary>
        /// <remarks>Requests a seat or seats to book (max 4)</remarks>
        /// <param name="seatRequests">Seat to request</param>
        /// <response code="201">seats booked</response>
        /// <response code="400">invalid input, request invalid</response>
        /// <response code="409">the seat is already booked</response>
        [HttpPost]
        [Route("/Alex-Horlock/SeatBooking/1.0.0/seats")]
        [ValidateModelState]
        [SwaggerOperation("BookSeatRequest")]
        public virtual IActionResult BookSeatRequest([FromBody]List<Seat> seatRequests)
        {      
            _bookingSystem.AddSeats(seatRequests, out int httpStatusCode);
            
            return StatusCode(httpStatusCode); 
        }

        /// <summary>
        /// gets available meetings
        /// </summary>
        /// <remarks>returns all available meetings in system </remarks>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/Alex-Horlock/SeatBooking/1.0.0/meetings")]
        [ValidateModelState]
        [SwaggerOperation("GetMeetings")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Meeting>), description: "search results matching criteria")]
        public virtual IActionResult GetMeetings()
        { 
             IEnumerable<Meeting> meetings = _bookingSystem.GetMeetings();
             return StatusCode(200, meetings);
        }

        /// <summary>
        /// gets seats and their booking status
        /// </summary>
        /// <remarks>By passing in the row and column, you can search for all available seats in the system </remarks>
        /// <param name="meetingId">the id of the meeting</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/Alex-Horlock/SeatBooking/1.0.0/seats")]
        [ValidateModelState]
        [SwaggerOperation("GetSeats")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Seat>), description: "search results matching criteria")]
        public virtual IActionResult GetSeats([FromQuery]Guid meetingId)
        { 
            IEnumerable<Seat> seats = _bookingSystem.GetSeats(meetingId);
            return StatusCode(200, seats);
        }
    }
}
